datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") 
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  photographer
  customer
  admin
  pending
}

enum ProjectStatus {
  pending
  active
  awaiting_selection
  editing
  completed
}

enum AdminLevel {
  BASIC
  SUPER
}

model User {
  id              Int         @id @default(autoincrement())
  firstname       String      @db.VarChar(100)
  lastname        String      @db.VarChar(100)
  username        String?     @unique @db.VarChar(100)
  email           String      @unique @db.VarChar(100)
  emailVerified   DateTime?
  password        String?     @db.VarChar(255)
  image           String?
  role            Role
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  // One-to-one relationships
  Admin           Admin?      @relation("UserAdmin")
  Customer        Customer?   @relation("UserCustomer")
  Photographer    Photographer? @relation("UserPhotographer")

  // New relations for Likes and Favourites
  likes           Like[]      @relation("UserLikes")
  favourites      Favourite[] @relation("UserFavourites")

  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Admin {
  admin_id              Int       @id
  permissions           Json      @default("{}")
  admin_level           AdminLevel @default(BASIC)
  is_approved           Boolean   @default(false)
  approved_by_admin_id  Int?

  // One-to-one relationship with User
  User                  User      @relation("UserAdmin", fields: [admin_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "admin_user_fk")

  // Self-referencing relation (Admin who approved this Admin)
  ApprovedBy            Admin?    @relation("AdminToAdmin", fields: [approved_by_admin_id], references: [admin_id])
  ApprovedAdmins        Admin[]   @relation("AdminToAdmin")

  // Relation to Photographers this Admin has approved
  ApprovedPhotographers Photographer[] @relation("PhotographerApprovedBy")

  @@map("admins")
}

model Customer {
  cust_id       Int      @id
  favourites    Json?    @default("[]") // Stores favourites as a JSON array.
  profile_image String?  @db.VarChar(255)

  // One-to-one relationship with User
  User          User     @relation("UserCustomer", fields: [cust_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "customer_user_fk")

  // One-to-many relationships
  reviews       Review[] @relation("CustomerReviews")
  projects      Project[] @relation("CustomerProjects")

  @@map("customers")
}

model Photographer {
  photo_id         Int      @id
  bio              String   @db.VarChar(255)
  website          String   @db.VarChar(255)
  instagram        String   @db.VarChar(255)
  mobile_num       Int
  is_approved      Boolean  @default(false)
  approved_by_admin_id Int?
  address          String   @db.VarChar(255)
  profile_picture  String   @db.VarChar(255) 

  // One-to-one relationship with User
  User             User     @relation("UserPhotographer", fields: [photo_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "photographer_user_fk")
  ApprovedBy       Admin?   @relation("PhotographerApprovedBy", fields: [approved_by_admin_id], references: [admin_id])

  // New back-relation for subscriptions
  subscriptions    PhotographerSubscription[] @relation("PhotographerSubscriptions")

  // One-to-many relationships
  albums           Album[]       @relation("PhotographerAlbums")
  photographs      Photograph[]  @relation("PhotographerPhotographs")
  reviews          Review[]      @relation("PhotographerReviews")
  projects         Project[]     @relation("PhotographerProjects")

  @@map("photographers")
}

model Album {
  id              Int           @id @default(autoincrement())
  photographer_id Int
  title           String        @db.VarChar(45)
  slug            String        @db.VarChar(255)
  description     String        @db.VarChar(255)
  category_id     Int
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  Photographer    Photographer  @relation("PhotographerAlbums", fields: [photographer_id], references: [photo_id], onDelete: Cascade, onUpdate: Restrict)
  photographs     Photograph[]  @relation("AlbumPhotographs")
  Category        Category      @relation("CategoryAlbums", fields: [category_id], references: [id], onDelete: Restrict)

  tags            Tag[]         @relation("AlbumTags")
  likes           Like[]        @relation("AlbumLikes")
  favourites      Favourite[]   @relation("AlbumFavourites")

  chapters        Chapter[]

  @@unique([slug, photographer_id], name: "slug_photographer_id")
  @@map("albums")
}

model Chapter {
  id          Int         @id @default(autoincrement())
  album       Album       @relation(fields: [albumId], references: [id])
  albumId     Int
  title       String      @db.VarChar(100)
  description String?     @db.VarChar(255)
  order       Int         // This will allow you to sort chapters (e.g., 1, 2, 3, ...)
  created_at  DateTime    @default(now())

  photographs Photograph[]  // Photos that are part of this chapter

  @@map("chapters")
}

model Photograph {
  id              Int           @id @default(autoincrement())
  album_id        Int
  title           String        @db.VarChar(255)
  description     String        @db.VarChar(255)
  image_url       String        @db.VarChar(255)
  thumbnail_url   String        @db.VarChar(255)
  image_width     Int
  image_height    Int
  thumbnail_width Int
  thumbnail_height Int
  cameraModel     String?       @db.VarChar(100)
  lens            String?       @db.VarChar(100)
  exposure        String?       @db.VarChar(50)
  focalLength     String?       @db.VarChar(50)
  likes_count     Int           @default(0)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  photographer_id Int        
  random_float    Float         @default(0.0)

  Album           Album         @relation("AlbumPhotographs", fields: [album_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Photographer    Photographer  @relation("PhotographerPhotographs", fields: [photographer_id], references: [photo_id], onDelete: Cascade, onUpdate: Cascade)

  likes           Like[]        @relation("PhotographLikes")
  favourites      Favourite[]   @relation("PhotographFavourites")
  reviews         Review[]      @relation("PhotographReviews")
  tags            Tag[]         @relation("PhotographTags")

  // New optional field for chapter assignment
  chapterId        Int? 
  Chapter          Chapter?      @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@map("photographs")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(45)

  albums      Album[]       @relation("AlbumTags")
  photographs Photograph[]  @relation("PhotographTags")

  @@map("tags")
  @@index([name])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(45)
  albums  Album[]  @relation("CategoryAlbums")

  @@map("categories")
}

model Review {
  id              Int      @id @default(autoincrement())
  customer_id     Int
  photographer_id Int
  photograph_id   Int?
  rating          Int
  comment         String   @db.VarChar(255)
  project_id      Int

  Customer        Customer     @relation("CustomerReviews", fields: [customer_id], references: [cust_id], onDelete: Cascade, onUpdate: Cascade, map: "reviews_customer_fkey")
  Photographer    Photographer @relation("PhotographerReviews", fields: [photographer_id], references: [photo_id], onDelete: Cascade, onUpdate: Cascade, map: "reviews_photographer_fkey")
  Photograph      Photograph?  @relation("PhotographReviews", fields: [photograph_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "reviews_photograph_fkey")
  Project         Project      @relation("ProjectReviews", fields: [project_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("reviews")
}

// New normalized subscription models

model SubscriptionPlan {
  id               Int                      @id @default(autoincrement())
  name             String                   @unique @db.VarChar(45)
  description      String
  price            Decimal                  @db.Decimal(10, 2)
  planFeatures     SubscriptionPlanFeature[]
  PhotographerSubscriptions PhotographerSubscription[]

  @@map("subscription_plans")
}

model SubscriptionFeature {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(45) // e.g., "maxAlbums", "maxPhotosPerAlbum", "dashboardAccess"
  description String?
  dataType    String?  // e.g., "number", "boolean", "string"
  planFeatures SubscriptionPlanFeature[]

  @@map("subscription_features")
}

model SubscriptionPlanFeature {
  id                     Int     @id @default(autoincrement())
  subscriptionPlanId     Int
  subscriptionFeatureId  Int
  value                  String  // Store the feature value as a string; convert as needed

  subscriptionPlan       SubscriptionPlan    @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)
  subscriptionFeature    SubscriptionFeature @relation(fields: [subscriptionFeatureId], references: [id], onDelete: Cascade)

  @@unique([subscriptionPlanId, subscriptionFeatureId])
  @@map("subscription_plan_features")
}

model PhotographerSubscription {
  id                   Int      @id @default(autoincrement())
  photographerId       Int
  subscriptionPlanId   Int
  startDate            DateTime @default(now())
  endDate              DateTime?
  active               Boolean  @default(true)

  Photographer         Photographer     @relation("PhotographerSubscriptions", fields: [photographerId], references: [photo_id], onDelete: Cascade)
  subscriptionPlan     SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)

  @@map("photographer_subscriptions")
}

model Package {
  id       Int       @id @default(autoincrement())
  name     String    @unique @db.VarChar(100)
  // Add other relevant fields for Package as needed
  projects Project[] @relation("PackageProjects")

  @@map("packages")
}

model Favourite {
  id             Int      @id @default(autoincrement())
  user_id        Int
  photograph_id  Int?
  album_id       Int?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  User           User         @relation("UserFavourites", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Photograph     Photograph?  @relation("PhotographFavourites", fields: [photograph_id], references: [id], onDelete: Cascade)
  Album          Album?       @relation("AlbumFavourites", fields: [album_id], references: [id], onDelete: Cascade)

  @@unique([user_id, photograph_id], name: "user_photo_unique")
  @@unique([user_id, album_id], name: "user_album_unique")
  @@map("favourites")
}

model Like {
  id             Int      @id @default(autoincrement())
  user_id        Int
  photograph_id  Int
  album_id       Int?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  User           User         @relation("UserLikes", fields: [user_id], references: [id], onDelete: Cascade)
  Photograph     Photograph   @relation("PhotographLikes", fields: [photograph_id], references: [id], onDelete: Cascade)
  Album          Album?       @relation("AlbumLikes", fields: [album_id], references: [id], onDelete: Cascade)

  @@unique([user_id, photograph_id], name: "user_photo_unique")
  @@unique([user_id, album_id], name: "user_album_unique")
  @@map("likes")
}

model Project {
  id              Int           @id @default(autoincrement())
  photographer_id Int
  customer_id     Int
  package_id      Int
  status          ProjectStatus
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  Photographer    Photographer  @relation("PhotographerProjects", fields: [photographer_id], references: [photo_id], onDelete: Cascade, onUpdate: Cascade)
  Customer        Customer      @relation("CustomerProjects", fields: [customer_id], references: [cust_id], onDelete: Cascade, onUpdate: Cascade)
  Package         Package       @relation("PackageProjects", fields: [package_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  reviews         Review[]      @relation("ProjectReviews")
  @@map("projects")
}

// nextauth models

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}